#
# This file is part of Invenio.
# Copyright (C) 2016-2018 CERN.
#
# Invenio is free software; you can redistribute it and/or modify it
# under the terms of the MIT License; see LICENSE file for more details.

"""add endorsement request and reply models"""

import sqlalchemy as sa
import sqlalchemy_utils
from alembic import op
from sqlalchemy.dialects import mysql
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '1751019450'
down_revision = '1747215441'
branch_labels = None
depends_on = None


def upgrade():
    """Upgrade database."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('endorsement_request',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('record_id', sqlalchemy_utils.types.uuid.UUIDType(), nullable=False),
    sa.Column('reviewer_id', sa.Integer(), nullable=False),
    sa.Column('latest_status', sa.Text(), nullable=True),
    sa.Column('created', sa.DateTime().with_variant(mysql.DATETIME(fsp=6), 'mysql'), nullable=False),
    sa.Column('updated', sa.DateTime().with_variant(mysql.DATETIME(fsp=6), 'mysql'), nullable=False),
    sa.ForeignKeyConstraint(['record_id'], ['rdm_records_metadata.id'], name=op.f('fk_endorsement_request_record_id_rdm_records_metadata'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['reviewer_id'], ['reviewer.id'], name=op.f('fk_endorsement_request_reviewer_id_reviewer'), ondelete='NO ACTION'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_endorsement_request'))
    )
    op.create_index(op.f('ix_endorsement_request_record_id'), 'endorsement_request', ['record_id'], unique=False)
    op.create_index(op.f('ix_endorsement_request_reviewer_id'), 'endorsement_request', ['reviewer_id'], unique=False)
    
    op.create_table('endorsement_reply',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('endorsement_request_id', sa.Integer(), nullable=False),
    sa.Column('inbox_id', sa.Integer(), nullable=False),
    sa.Column('status', sa.Text(), nullable=False),
    sa.Column('message', sa.Text(), nullable=True),
    sa.Column('created', sa.DateTime().with_variant(mysql.DATETIME(fsp=6), 'mysql'), nullable=False),
    sa.Column('updated', sa.DateTime().with_variant(mysql.DATETIME(fsp=6), 'mysql'), nullable=False),
    sa.ForeignKeyConstraint(['endorsement_request_id'], ['endorsement_request.id'], name=op.f('fk_endorsement_reply_endorsement_request_id_endorsement_request'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['inbox_id'], ['notify_inbox.id'], name=op.f('fk_endorsement_reply_inbox_id_notify_inbox'), ondelete='NO ACTION'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_endorsement_reply')),
    sa.UniqueConstraint('inbox_id', name=op.f('uq_endorsement_reply_inbox_id'))
    )
    op.create_index(op.f('ix_endorsement_reply_endorsement_request_id'), 'endorsement_reply', ['endorsement_request_id'], unique=False)
    op.create_index(op.f('ix_endorsement_reply_inbox_id'), 'endorsement_reply', ['inbox_id'], unique=False)
    
    # Add unique constraint to endorsement.inbox_id
    op.create_unique_constraint(op.f('uq_endorsement_inbox_id'), 'endorsement', ['inbox_id'])
    # ### end Alembic commands ###


def downgrade():
    """Downgrade database."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Remove unique constraint from endorsement.inbox_id
    op.drop_constraint(op.f('uq_endorsement_inbox_id'), 'endorsement', type_='unique')
    
    op.drop_index(op.f('ix_endorsement_reply_inbox_id'), table_name='endorsement_reply')
    op.drop_index(op.f('ix_endorsement_reply_endorsement_request_id'), table_name='endorsement_reply')
    op.drop_table('endorsement_reply')
    op.drop_index(op.f('ix_endorsement_request_reviewer_id'), table_name='endorsement_request')
    op.drop_index(op.f('ix_endorsement_request_record_id'), table_name='endorsement_request')
    op.drop_table('endorsement_request')
    # ### end Alembic commands ###